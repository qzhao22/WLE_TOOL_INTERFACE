{
    "collab_server" : "",
    "contents" : "library(tidyr)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(lubridate)\nlibrary(zoo)\n\n########################################################################################\n#Survey weights for agriculture, hydropower, ecosystems & WEB USER INPUT\nreadweights <- read.csv(\"User_ESS.csv\",stringsAsFactors=FALSE) %>% select(-LOC) %>% \n  gather(ESS, rank, -Agent_ID)\n\n# Scenario: #we will need a file or something from web-user team that tells which scenario\nscenario<-\"Historical\" #Historical, Current, Future\nif (scenario == \"Historical\") {\n  selection <- c(\"Historical\")} else if(scenario == \"Current\"){\n    selection <- c(\"Historical\",\"Current\")} else if(scenario == \"Future\"){\n      selection <- c(\"Historical\",\"Current\",\"Future\")}\n\n########################################################################################\n##### Input Files ######\n########################################################################################\nagt_sb <- read.csv(\"MK_Agent_Sub_basins_v6.csv\") %>% rename(SB_ID = Subbasin)\nnum_agt <- length(unique(agt_sb$Agent_ID))\ness <- c(\"AG\",\"HP\",\"ECO\")\nresnum <- 35\n\nres_ini <- read.table(\"Reservoir_initial.txt\")\ncolnames(res_ini)[1:ncol(res_ini)] <- c(\"RS_ID\",\"SB_ID\",\"StartYear\",\"StartMonth\",\"ESA\",\"EVOL\",\"PSA\",\"PVOL\",\"VOL_IN\",\n                                        paste0(\"STARG_\",1:12),\"NDTARG\",paste0(\"MXOUT_\",1:12),paste0(\"MNOUT_\",1:12))\n\nreadhydpow <- read.csv(\"reservoir_data_for_ABM_v5.csv\",stringsAsFactors=FALSE) %>% \n  tbl_df() %>% \n  select(Agent_ID, Reservoir, AveAnnEn_GWh = Mean.Annual.Energy..GWh., DayCap_GWh = Daily.Capacity..GWh.,Efficiency, a, b, c, Status) %>% \n  mutate(Reservoir = as.numeric(Reservoir))\n\ndams <- filter(readhydpow, Status %in% selection) %>% .$Reservoir \n\n# Crop, Hydropower and Ecosystem (IHA and EFC) targets \nload(\"HP_Crop_targets.RData\")\nload(\"AllEcoTargets.RData\")\n\n#Initial SWAT paramters for crops\ncrop_hru <- read.table(\"Crop_initial.txt\")\ncolnames(crop_hru) <- c(\"SB_ID\",\"HRU_ID\",\"LandUse\",\"AreaFrac\",\"PlantDate\",\"IrriHeat\",\"Irri_TS\",\"Irri_eff\",\"Irri_minflow\",\"CTCode\")\n\nCrop <- c(\"AGRL\",\"IRRU\",\"IRR1\",\"IRR2\",\"IRR3\",\"RFR1\",\"RFR2\",\"RFR3\")\nNonCrop <- c(\"FRSE\",\"RNGE\",\"WETL\")\nIRR <- c(\"IRR1\",\"IRR2\",\"IRR3\")\n\n####### IHA AND EFC CALCULATION DATES\nleapyears <- c(6,10,14,18,22,26)\nyd <- data.frame(cal_day = 1:365, \n                 month = c(rep(\"January\",31),rep(\"February\",28),rep(\"March\",31), rep(\"April\",30),rep(\"May\",31),rep(\"June\",30),\n                           rep(\"July\",31),rep(\"August\",31),rep(\"September\",30),rep(\"October\",31),rep(\"November\",30),rep(\"December\",31))\n)\nlyd <- data.frame(cal_day = 1:366, \n                  month = c(rep(\"January\",31),rep(\"February\",29),rep(\"March\",31), rep(\"April\",30),rep(\"May\",31),rep(\"June\",30),\n                            rep(\"July\",31),rep(\"August\",31),rep(\"September\",30),rep(\"October\",31),rep(\"November\",30),rep(\"December\",31))\n)\nEC_SB <- filter(agt_sb, Downstream_sub == 1) %>% .$SB_ID\n\nSB_ECOIND <- read.csv(file = \"SBID_EcoIndicator.csv\",na.strings = \"\") %>% gather(czz,TargetVar, -SB_ID,na.rm = T) %>% select(-czz)\n\nAllEcoSummary <- NULL\nlfm <- c(\"March\",\"April\",\"May\")\n\n##############################################################################\n###  SWAT  ###################################################################\n##############################################################################\n\nfile.create(\"SWAT_flag.txt\")\nsystem(\"swat2012_083116\",wait=FALSE,invisible=FALSE)\nn<-5 #SWAT reports simulation results from year 5 (1983) onwards, the first four years are for the model to \"warm-up\"\n\nwhile(n<29) #SWAT simulation period: 25 years - this part returns back to ABM\n{\n  while (file.exists(\"SWAT_flag.txt\"))\n  {\n  }\n\n  #SWAT output variables (ABM input variables)\n  \n  #########################################################\n  ####### Reservoir Storage AND RELEASE ################### \n  #########################################################\n  \n  reservoir_mekong <- read.table(\"Reservoir_Mekong_to_ABM.txt\")\n  colnames(reservoir_mekong)[1:ncol(reservoir_mekong)] <- c(\"year\",\"cal_day\",paste0(\"Volume_Res\",1:resnum),paste0(\"Release_Res\",1:resnum))\n  \n  ABM_reservoir <- reservoir_mekong %>% \n    tbl_df() %>% \n    filter(year == n) %>% \n    gather(key=Att,value=Variable,-year,-cal_day) %>%\n    separate(col=Att,into=c(\"Attr\",\"Reservoir\"),sep=\"_\") %>%\n    spread(Attr, Variable) %>% \n    mutate(Reservoir = extract_numeric(Reservoir))\n  \n  ABM_HP <- filter(ABM_reservoir, Reservoir %in% dams) %>% \n    left_join(readhydpow, by=\"Reservoir\") %>% \n    select(-AveAnnEn_GWh,-Status) %>% \n    mutate(Head = a*Volume^b+c,\n           RawHP_Prod = (1000*9.81*Head*Release/1000000000)*(1/(24*60*60))*24*Efficiency,\n           RawHP_Prod_cap = ifelse(RawHP_Prod > DayCap_GWh, DayCap_GWh, RawHP_Prod)) \n  \n  ModAnnHP <- group_by(ABM_HP,Reservoir, Agent_ID) %>% \n    summarise(Mod_AnnHP = sum(RawHP_Prod_cap, na.rm=T))\n  \n  if(n==5){ndtarg <- rep(25,35)}\n  \n  #########################################################\n  ####### Crops ###########################################\n  #########################################################\n  \n  crop_mekong  <- read.table(\"Crop_Mekong_to_ABM.txt\") %>% tbl_df()\n  colnames(crop_mekong) <- c(\"year\",\"SB_ID\",\"HRU_ID\",\"LandUse\",\"Act_yield\",\"IWW\")\n  crop_mekong_f <- filter(crop_mekong, year == n)  \n  \n  ModCP <- select(valreg, SB_ID:LandUse) %>%\n    left_join(crop_mekong_f, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n    left_join(agt_sb, by=\"SB_ID\") %>%\n    left_join(crop_hru, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n    select(Agent_name,Agent_ID,SB_ID:IWW, SB_area, AreaFrac) %>%\n    mutate(ModCropProd = Act_yield*SB_area*AreaFrac) %>%\n    group_by(Agent_ID) %>%\n    summarise(ModAgtProd = sum(ModCropProd))\n\n  #########################################################\n  ## IHA and EFC Calculations ###\n  #########################################################\n  ###### Streamflow\n  flow_mekong <- read.table(\"Flow_Mekong_to_ABM.txt\")\n  colnames(flow_mekong)[1:ncol(flow_mekong)] <- c(\"year\",\"cal_day\",paste0(\"Flow_SB_\",1:(ncol(flow_mekong)-2)))\n  \n  ABM_flow <- flow_mekong %>%\n    tbl_df() %>%  \n    filter(year == n) %>% \n    gather(key=Subbasin,value=Flow,-year,-cal_day) %>%\n    mutate(SB_ID = extract_numeric(Subbasin)) %>%\n    select(-Subbasin)\n  \n  if (n %in% leapyears) {EcoDF <- left_join(ABM_flow, lyd, by=\"cal_day\")} else {EcoDF <- left_join(ABM_flow, yd, by=\"cal_day\")}\n  \n  IHA_month <- filter(EcoDF, SB_ID %in% EC_SB) %>%\n    group_by(SB_ID,month) %>%\n    summarise(MonthlyMean = mean(Flow)) %>%\n    spread(month,MonthlyMean) %>%\n    select(one_of(c(\"SB_ID\",month.name)))\n  \n  IHA_FW <- filter(EcoDF, SB_ID %in% EC_SB) %>%\n    group_by(SB_ID) %>%\n    mutate(Q7daysum = rollsumr(x=Flow,k=7,fill=NA),\n           Q30daysum = rollsumr(x=Flow,k=30,fill=NA),\n           Q90daysum = rollsumr(x=Flow,k=90,fill=NA)) %>%\n    mutate(Q7daysum = ifelse(Q7daysum < 0, 0, Q7daysum),\n           Q30daysum = ifelse(Q30daysum < 0, 0, Q30daysum),\n           Q90daysum = ifelse(Q90daysum < 0, 0, Q90daysum)) %>%\n    group_by(SB_ID) %>% summarise(AvQ7daymax = max(Q7daysum, na.rm=T),\n                                  AvQ7daymin = min(Q7daysum, na.rm=T),\n                                  AvQ30daymax = max(Q30daysum, na.rm=T),\n                                  AvQ30daymin = min(Q30daysum, na.rm=T),\n                                  AvQ90daymax = max(Q90daysum, na.rm=T))\n  AllIHAmod <- left_join(IHA_FW,IHA_month)\n  \n  ########### EFC CALCULATIONS  ###########################\n  \n  #CALCULATE THE AVERAGE MONTHLY LOW-FLOWS FOR EACH SUBBASIN\n  LowFlows <- filter(EcoDF, SB_ID %in% EC_SB & month %in% lfm) %>% \n    group_by(SB_ID, month) %>%\n    summarise(LFM = min(Flow, na.rm=T)) \n  \n  Mar_LFM <- filter(LowFlows, month == \"March\") %>% select(SB_ID, Mar_AveAnnLF = LFM) \n  Apr_LFM <- filter(LowFlows, month == \"April\") %>% select(SB_ID, Apr_AveAnnLF = LFM) \n  May_LFM <- filter(LowFlows, month == \"May\") %>% select(SB_ID, May_AveAnnLF = LFM) \n\n  # CATEGORIZING ALL FLOWS\n  \n  EFC_CL <- filter(ABM_flow, SB_ID %in% EC_SB) %>%\n    left_join(FL_TH) %>%\n    mutate(HiFlo = ifelse(AveHF < Flow, ifelse(Flow < SmFl, 1, 0), 0),\n           SmallFl = ifelse(SmFl < Flow, ifelse(Flow < LgFl, 1, 0), 0),\n           LargeFl = ifelse(Flow > LgFl, 1,0))\n  \n  #SMALL FLOOD MEAN VALUE\n  SFMV <- filter(EFC_CL, HiFlo == 1) %>% group_by(SB_ID) %>% summarise(SmFlMeanVal = mean(Flow, na.rm=T))\n  \n  # LARGE FLOOD JULIAN DATE\n  LFPK <- filter(EFC_CL, LargeFl == 1) %>% group_by(year,SB_ID) %>% top_n(Flow, n=1) %>%\n    group_by(SB_ID) %>% summarise(AvLFJD = round(mean(cal_day),digits=0))\n  \n  # HIGH-FLOW PULSE PEAK VALUE AND JULIAN DATE\n  HFPK <- filter(EFC_CL, HiFlo == 1) %>% group_by(year, SB_ID) %>% top_n(Flow, n=1) %>%\n    group_by(SB_ID) %>% summarise(AvHFPK = mean(Flow), AvHFPKJD = round(mean(cal_day),digits=0))\n  \n  # AVERAGE ANNUAL DURATIONS FOR SMALL FLOODS, LARGE FLOODS AND HIGH FLOW PULSES\n  ynd <- data.frame(year = 5:29, days = c(365, rep(c(366, 365, 365, 365), 6)))\n  ynd[,\"End\"] <- cumsum(ynd[,2]); ynd[,\"Start\"] <- lag(ynd[,3],1) ; ynd[1,4] <- 1\n  EFC_CL_dur <- mutate(EFC_CL, HiFlo_C = NA, SmallFl_C = NA, LargeFl_C = NA) %>% select(-AveHF:-LgFl) %>%  as.data.frame(EFC_CL)\n  z <-dim(EFC_CL_dur)[1] #gives the number of rows for the trick below\n  EFC_CL_dur[(z+1):(z+2),] <- EFC_CL_dur[z,] # repeating last two observations because of loop below\n  \n  if (n %in% leapyears) {end <- 366} else {end <- 365}\n  for (x in 5:7){ #for each flow type\n    for (a in 1:length(EC_SB)){ # for each subbasin\n      counter <- 0\n      for (c in 1:end){ # for each day\n        if(EFC_CL_dur[(end*(a-1))+c + 2,x] == 1) {\n          if(EFC_CL_dur[(end*(a-1))+c +1,x] == 0 & EFC_CL_dur[(end*(a-1))+c,x]==0){counter<- counter + 1}\n          EFC_CL_dur[(end*(a-1))+c +2,x+3] <- counter\n        }\n      }\n    }\n  }\n  \n  HF_DUR <- group_by(EFC_CL_dur, SB_ID, HiFlo_C) %>% summarise(Dur = n()) %>% filter(!is.na(HiFlo_C)) %>%\n    group_by(SB_ID) %>%  summarise(AvAnnHFDur = mean(Dur))\n  SF_DUR <- group_by(EFC_CL_dur, year, SB_ID, SmallFl_C) %>% summarise(Dur = n()) %>% filter(!is.na(SmallFl_C)) %>%\n    group_by(SB_ID) %>%  summarise(AvAnnSFDur = mean(Dur))\n  LF_DUR <- group_by(EFC_CL_dur, year, SB_ID, LargeFl_C) %>% summarise(Dur = n()) %>% filter(!is.na(LargeFl_C)) %>%\n    group_by(SB_ID) %>%  summarise(AvAnnLFDur = mean(Dur))\n  \n  AllEcoMod <- Reduce(function(...) merge(..., all=TRUE), list(HFPK, HF_DUR, LFPK, LF_DUR, SFMV, SF_DUR, Mar_LFM, Apr_LFM, May_LFM)) %>%\n    left_join(AllIHAmod) %>% gather(TargetVar,ModVal,-SB_ID)\n  \n  AllEcoMod_f <- left_join(SB_ECOIND, AllEcoMod, by=c(\"SB_ID\",\"TargetVar\"))\n\n  #############################################################################\n  ######################### DECISIONS #########################################\n  #############################################################################\n  Need_ECO <- data.frame(Agent_ID = 1:12, ESS = \"ECO\", Need = 0)\n  Need_HP <- data.frame(Agent_ID = 1:12, ESS = \"HP\", Need = 0)\n  Need_AG <- data.frame(Agent_ID = 1:12, ESS = \"AG\", Need = 0)\n  \n  ## DETERMINING AGRICULTURE SHORTAGES\n  AgCheck <- left_join(ModCP, Targ_irri_crop) %>%\n    mutate(Flag = ifelse(ModAgtProd < 0.9*TargAgtCP,1,0)) %>%\n    as.data.frame()\n  for (c in 1:dim(AgCheck)[1]){if(AgCheck[c,5]>0) {Need_AG[c,3] <- 1}}\n  \n  ## DETERMINING HYDROPOWER SHORTAGES\n  HPcheck <- left_join(ModAnnHP, TargAnnHP, by=\"Reservoir\") %>%\n    mutate(Flag = ifelse(Mod_AnnHP < 0.9*Targ_AnnAveHP,1,0)) %>%\n    as.data.frame()\n  for (q in 1:dim(HPcheck)[1]){\n    hp_id <- HPcheck[q,2]\n    if(HPcheck[q,6]>0) {Need_HP[Need_HP$Agent_ID == hp_id,3] <- 1}\n  }\n  \n  ## DETERMINING ECO VIOLATIONS\n  ## CHECKING WHICH ECO PARAMETERS ARE VIOLATED\n  \n  EcoCheck <- left_join(AllEcoMod_f, AllEcoTargets,  by=c(\"SB_ID\",\"TargetVar\")) %>%\n    mutate(Flag = ifelse(ModVal > 1.5*TargetVal, 1, ifelse(ModVal < 0.5 * TargetVal, 1, 0))) %>%\n    mutate(Flag = ifelse(is.na(Flag),1,Flag)) %>% # if a eco parameter is NA, it is counted as a violation\n    group_by(SB_ID) %>%\n    summarise(TotFlag = sum(Flag, na.rm=T),\n              FlagRatio = mean(Flag, na.rm=T))\n  \n  hotspot_agent <- left_join(EcoCheck, agt_sb, by=\"SB_ID\") %>%\n    select(SB_ID,Agent_ID,Agent_name,FlagRatio) %>%\n    group_by(Agent_ID,Agent_name) %>%\n    summarise(AgentFlagRatio = mean(FlagRatio),\n              TotHS = n()) %>%\n    as.data.frame()\n  \n  for (e in 1:dim(hotspot_agent)[1]){\n    a_id <- hotspot_agent[e,1]\n    if(hotspot_agent[e,3]>0.5) {Need_ECO[Need_ECO$Agent_ID == a_id,3] <- 1}\n  }\n  #########################  ACTUAL DECISION MAKING LOOP ######################\n  if(n == 5){foo <- crop_hru} else {foo <- mutate(crop_hru,AreaFrac = hru_fr_k)}\n  \n  AllNeeds <- bind_rows(Need_AG,Need_ECO,Need_HP)\n  \n  # Decision Table\n  DT <- select(readweights, Agent_ID, ESS, PRI = rank) %>%\n    left_join(AllNeeds, by=c(\"Agent_ID\",\"ESS\")) %>% as.data.frame()\n  \n  Allnew_sbhru <- NULL\n  \n  for (agt in 1:num_agt){\n    AG_pri <- filter(DT,Agent_ID == agt & ESS==\"AG\") %>% .$PRI; AG_need <- filter(DT,Agent_ID == agt & ESS==\"AG\") %>% .$Need\n    HP_pri <- filter(DT,Agent_ID == agt & ESS==\"HP\") %>% .$PRI; HP_need <- filter(DT,Agent_ID == agt & ESS==\"HP\") %>% .$Need\n    ECO_pri <- filter(DT,Agent_ID == agt & ESS==\"ECO\") %>% .$PRI; ECO_need <- filter(DT,Agent_ID == agt & ESS==\"ECO\") %>% .$Need\n    \n    ######################################\n    # CASE # 1\n    ######################################\n    \n    if(AG_pri == 1){\n      if(AG_need == 1){\n        # Increase irrigated crop area\n        agtsb_AG <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>%\n          filter(Agent_ID == agt) %>%\n          left_join(valreg, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n          select(-ncropseas:-aveirriww,-CTCode,-HRU_area) %>%\n          mutate(FlagRel = ifelse(is.na(FlagRel),0,FlagRel))\n        sbz <- unique(agtsb_AG$SB_ID)\n        for (sbn in 1:length(sbz)){\n          sb_AG <- filter(agtsb_AG, SB_ID==sbz[sbn])\n          old_AF <- sb_AG$AreaFrac\n          irrhru <- sb_AG$LandUse %in% IRR & sb_AG$FlagRel == 1\n          old_IRR_area <- sum(filter(sb_AG, FlagRel == 1 & LandUse %in% IRR) %>% .$AreaFrac)\n          if(old_IRR_area > 0 & old_IRR_area < 0.909){\n            new_AF <- old_AF\n            new_AF[irrhru] <- old_AF[irrhru]*1.1\n            new_AF[!irrhru] <- old_AF[!irrhru]*((1-(old_IRR_area*1.1))/(1-old_IRR_area))\n            sb_AG  %<>%  mutate(NewAreaFrac = new_AF) %>% select(-FlagRel,-AreaFrac)\n          } else {\n            sb_AG %<>%  mutate(NewAreaFrac = AreaFrac) %>% select(-FlagRel,-AreaFrac)\n          }\n          Allnew_sbhru <- rbind(Allnew_sbhru,sb_AG)\n        }\n      } else if (HP_need == 1){\n        # Decrease days needed to satisfy target storage\n        AgentRV_HP <- filter(HPcheck,Agent_ID == agt)\n        for (rv in 1:dim(AgentRV_HP)[1]){\n          if (AgentRV_HP[rv,6] == 1){\n            RV <- AgentRV_HP[rv,1]\n            ndtarg[RV] <- max(ndtarg[RV] - 1,20) # Decrease target storage by 1 day- lower limit is 20 days\n          }\n        }\n        # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n        ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>% \n          mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n          filter(Agent_ID == agt) \n        \n        Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n      } else if (AG_need== 0){\n\n        # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n        ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>% \n          mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n          filter(Agent_ID == agt) \n        \n        Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n      }\n      \n    }\n    \n    ######################################\n    # CASE #2\n    ######################################\n    \n    if (HP_pri == 1){\n      if(HP_need == 1){\n        # Decrease days needed to satisfy target storage\n        AgentRV_HP <- filter(HPcheck,Agent_ID == agt)\n        for (rv in 1:dim(AgentRV_HP)[1]){\n          if (AgentRV_HP[rv,6] == 1){\n            RV <- AgentRV_HP[rv,1]\n            ndtarg[RV] <- max(ndtarg[RV] - 1,20) # Decrease target storage by 1 day- lower limit is 20 days\n          }\n        }\n        # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n        ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>% \n          mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n          filter(Agent_ID == agt) \n        \n        Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n        \n      } else if (AG_need == 1){\n        # Increase irrigated crop area\n        agtsb_AG <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>%\n          filter(Agent_ID == agt) %>%\n          left_join(valreg, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n          select(-ncropseas:-aveirriww,-CTCode,-HRU_area) %>%\n          mutate(FlagRel = ifelse(is.na(FlagRel),0,FlagRel))\n        sbz <- unique(agtsb_AG$SB_ID)\n        for (sbn in 1:length(sbz)){\n          sb_AG <- filter(agtsb_AG, SB_ID==sbz[sbn])\n          old_AF <- sb_AG$AreaFrac\n          irrhru <- sb_AG$LandUse %in% IRR & sb_AG$FlagRel == 1\n          old_IRR_area <- sum(filter(sb_AG, FlagRel == 1 & LandUse %in% IRR) %>% .$AreaFrac)\n          if(old_IRR_area > 0 & old_IRR_area < 0.909){\n            new_AF <- old_AF\n            new_AF[irrhru] <- old_AF[irrhru]*1.1\n            new_AF[!irrhru] <- old_AF[!irrhru]*((1-(old_IRR_area*1.1))/(1-old_IRR_area))\n            sb_AG  %<>%  mutate(NewAreaFrac = new_AF) %>% select(-FlagRel,-AreaFrac)\n          } else {\n            sb_AG %<>%  mutate(NewAreaFrac = AreaFrac) %>% select(-FlagRel,-AreaFrac)\n          }\n          Allnew_sbhru <- rbind(Allnew_sbhru,sb_AG)\n        }\n      } else if (AG_need== 0){\n        \n        # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n        ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n          left_join(agt_sb, by=\"SB_ID\") %>%\n          select(Agent_ID,SB_ID:AreaFrac) %>% \n          mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n          filter(Agent_ID == agt) \n        \n        Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n      }\n      \n    }\n    \n    ######################################\n    # CASE  3 ######\n    ######################################\n    \n    if(ECO_pri == 1 & ECO_need == 1){\n      \n      ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n        left_join(agt_sb, by=\"SB_ID\") %>%\n        select(Agent_ID,SB_ID:AreaFrac) %>% \n        mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n        filter(Agent_ID == agt) \n      \n      Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n      \n    } else {\n      if(HP_pri == 2){\n        if(HP_need == 1){\n          # Decrease days needed to satisfy target storage\n          AgentRV_HP <- filter(HPcheck,Agent_ID == agt)\n          for (rv in 1:dim(AgentRV_HP)[1]){\n            if (AgentRV_HP[rv,6] == 1){\n              RV <- AgentRV_HP[rv,1]\n              ndtarg[RV] <- max(ndtarg[RV] - 1,20) # Decrease target storage by 1 day- lower limit is 20 days\n            }\n          }\n          \n          # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n          ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>% \n            mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n            filter(Agent_ID == agt) \n          \n          Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n          \n        } else if (AG_need == 1){\n          # Increase irrigated crop area\n          agtsb_AG <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>%\n            filter(Agent_ID == agt) %>%\n            left_join(valreg, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n            select(-ncropseas:-aveirriww,-CTCode,-HRU_area) %>%\n            mutate(FlagRel = ifelse(is.na(FlagRel),0,FlagRel))\n          sbz <- unique(agtsb_AG$SB_ID)\n          for (sbn in 1:length(sbz)){\n            sb_AG <- filter(agtsb_AG, SB_ID==sbz[sbn])\n            old_AF <- sb_AG$AreaFrac\n            irrhru <- sb_AG$LandUse %in% IRR & sb_AG$FlagRel == 1\n            old_IRR_area <- sum(filter(sb_AG, FlagRel == 1 & LandUse %in% IRR) %>% .$AreaFrac)\n            if(old_IRR_area > 0 & old_IRR_area < 0.909){\n              new_AF <- old_AF\n              new_AF[irrhru] <- old_AF[irrhru]*1.1\n              new_AF[!irrhru] <- old_AF[!irrhru]*((1-(old_IRR_area*1.1))/(1-old_IRR_area))\n              sb_AG  %<>%  mutate(NewAreaFrac = new_AF) %>% select(-FlagRel,-AreaFrac)\n            } else {\n              sb_AG %<>%  mutate(NewAreaFrac = AreaFrac) %>% select(-FlagRel,-AreaFrac)\n            }\n            Allnew_sbhru <- rbind(Allnew_sbhru,sb_AG)\n          }\n        } else if (AG_need== 0){\n          \n          # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n          ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>% \n            mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n            filter(Agent_ID == agt) \n          \n          Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n        }\n        \n      }\n      if(AG_pri == 2){\n        if(AG_need == 1){\n          # Increase irrigated crop area\n          agtsb_AG <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>%\n            filter(Agent_ID == agt) %>%\n            left_join(valreg, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n            select(-ncropseas:-aveirriww,-CTCode,-HRU_area) %>%\n            mutate(FlagRel = ifelse(is.na(FlagRel),0,FlagRel))\n          sbz <- unique(agtsb_AG$SB_ID)\n          for (sbn in 1:length(sbz)){\n            sb_AG <- filter(agtsb_AG, SB_ID==sbz[sbn])\n            old_AF <- sb_AG$AreaFrac\n            irrhru <- sb_AG$LandUse %in% IRR & sb_AG$FlagRel == 1\n            old_IRR_area <- sum(filter(sb_AG, FlagRel == 1 & LandUse %in% IRR) %>% .$AreaFrac)\n            if(old_IRR_area > 0 & old_IRR_area < 0.909){\n              new_AF <- old_AF\n              new_AF[irrhru] <- old_AF[irrhru]*1.1\n              new_AF[!irrhru] <- old_AF[!irrhru]*((1-(old_IRR_area*1.1))/(1-old_IRR_area))\n              sb_AG  %<>%  mutate(NewAreaFrac = new_AF) %>% select(-FlagRel,-AreaFrac)\n            } else {\n              sb_AG %<>%  mutate(NewAreaFrac = AreaFrac) %>% select(-FlagRel,-AreaFrac)\n            }\n            Allnew_sbhru <- rbind(Allnew_sbhru,sb_AG)\n          }\n        } else if (HP_need == 1){\n          # Decrease days needed to satisfy target storage\n          AgentRV_HP <- filter(HPcheck,Agent_ID == agt)\n          for (rv in 1:dim(AgentRV_HP)[1]){\n            if (AgentRV_HP[rv,6] == 1){\n              RV <- AgentRV_HP[rv,1]\n              ndtarg[RV] <- max(ndtarg[RV] - 1,20) # Decrease target storage by 1 day- lower limit is 20 days\n            }\n          }\n          \n          # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n          ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>% \n            mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n            filter(Agent_ID == agt) \n          \n          Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n          \n        } else if (AG_need== 0){\n          \n          # THIS CODE BELOW DOES NO NEW CALCULATION FOR AREA FRACTION, JUST MAKES THE NEW SUBBASIN HRU FRACTION FILE\n          ANS_x <- select(foo,SB_ID,HRU_ID,LandUse,AreaFrac) %>%\n            left_join(agt_sb, by=\"SB_ID\") %>%\n            select(Agent_ID,SB_ID:AreaFrac) %>% \n            mutate(NewAreaFrac = AreaFrac) %>% select(-AreaFrac) %>% \n            filter(Agent_ID == agt) \n          \n          Allnew_sbhru <- rbind(Allnew_sbhru,ANS_x)\n        }\n        \n      }\n    } # END OF CASE 3 LOOP\n    \n  } # END OF AGENT DECISION MAKING LOOP\n\n  #########################################################################\n  #########################################################################\n  \n  hru_fr_k <- left_join(crop_hru, Allnew_sbhru, by = c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%.$NewAreaFrac\n  \n  HRU_FR_ABM <- left_join(crop_hru,Allnew_sbhru, by = c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>% \n    mutate(NewAreaFrac = ifelse(LandUse %in% NonCrop,-99,NewAreaFrac)) %>% \n    .$NewAreaFrac\n  \n  #IRR_eff_by_R is already constructed\n  IRR_ABM <- crop_hru[,c(\"Irri_eff\",\"Irri_minflow\")]\n  \n  flag <- rep(0,35);flag[dams] <- 1\n  EndYearStor <- filter(ABM_reservoir, cal_day == 365) %>% select(Reservoir, Volume) %>% arrange(Reservoir) %>% .$Volume\n  RES_ABM <- mutate(res_ini, \n                    Flag = flag,\n                    NDTARG = ndtarg,\n                    VOL_IN = EndYearStor) %>% \n    select(Flag, ESA, EVOL, PSA, PVOL, VOL_IN, NDTARG,STARG_1:STARG_12, MXOUT_1:MNOUT_12)\n\n  \n  # test1 <- group_by(Allnew_sbhru, SB_ID) %>% summarise(TotArea = sum(NewAreaFrac)) # DIAGNOSTICS\n\n  write.table(IRR_ABM,file=\"IRR_eff_from_ABM.txt\",col.names = F, row.names = F)\n  write.table(RES_ABM,file=\"Reservoir_from_ABM.txt\", col.names = F, row.names = F) \n  write.table(HRU_FR_ABM,file=\"HRU_FR_from_ABM.txt\", col.names = F, row.names = F)\n  \n  eco_summary <- left_join(EcoCheck, agt_sb, by=\"SB_ID\") %>%\n    mutate(Year = n) %>% \n    select(Year, Agent_ID,Hotspot_name,TotalViolations = TotFlag) %>%\n    arrange(Agent_ID) \n  \n  AllEcoSummary <- rbind(AllEcoSummary,eco_summary)\n\n  ################################################################\n  \n  #save decision variables: combines all years of simulation (by append) \n  \n  HRU_FR_save <- cbind(n,HRU_FR_ABM)\n  RES_ABM_save <- cbind(n,RES_ABM)\n  IRR_ABM_save <- cbind(n,IRR_ABM)\n  \n  write.table(IRR_ABM_save,file=\"save_Irr_eff_by_R.txt\",col.names = F, row.names = F, append =T)\n  write.table(RES_ABM_save,file=\"save_Reservoir_by_R.txt\", col.names = F, row.names = F, append =T) \n  write.table(HRU_FR_save,file=\"save_HRU_FR_by_R.txt\", col.names = F, row.names = F, append =T) \n\n  file.create(\"SWAT_flag.txt\")\n  n<-n+1\n  \n  if (n==29){#for last year of the simulation make and write out summary info\n    \n    ##### CROP OUTPUT ###########################################\n\n    cropmekong_x <- select(crop_mekong, -IWW) %>% mutate(year = paste0(\"Year_\",year)) %>% spread(year,Act_yield)\n    \n    crop_summary <- select(valreg, SB_ID:LandUse) %>%\n      left_join(cropmekong_x, by=c(\"SB_ID\", \"HRU_ID\", \"LandUse\")) %>%\n      left_join(agt_sb, by=\"SB_ID\") %>%\n      select(Agent_ID, SB_ID, HRU_ID,Year_10:Year_9) %>% \n      gather(key = year,IRRI_Yield, Year_10:Year_9, -Agent_ID, -SB_ID, -HRU_ID) %>% \n      mutate(year = extract_numeric(year)) %>% \n      arrange(year) %>% \n      group_by(year, Agent_ID, SB_ID) %>% \n      summarise(IRR_Yield_tons = sum(IRRI_Yield))\n\n\n    ##### HYDROPOWER OUTPUT ###########################################\n\n    hp_summary <- reservoir_mekong %>% \n      tbl_df() %>% \n      gather(key=Att,value=Variable,-year,-cal_day) %>%\n      separate(col=Att,into=c(\"Attr\",\"Reservoir\"),sep=\"_\") %>%\n      spread(Attr, Variable) %>% \n      mutate(Reservoir = extract_numeric(Reservoir)) %>% \n      filter(Reservoir %in% dams) %>% \n      left_join(readhydpow, by=\"Reservoir\") %>% \n      select(-AveAnnEn_GWh,-Status) %>% \n      mutate(Head = a*Volume^b+c,\n             RawHP_Prod = (1000*9.81*Head*Release/1000000000)*(1/(24*60*60))*24*Efficiency,\n             RawHP_Prod_cap = ifelse(RawHP_Prod > DayCap_GWh, DayCap_GWh, RawHP_Prod)) %>% \n      group_by(year, Agent_ID, Reservoir) %>% \n      summarise(Annual_HP_GWh = sum(RawHP_Prod_cap, na.rm=T))\n    \n    ###########################################################################\n    write.csv(crop_summary, file = \"crop_summary.csv\",row.names = FALSE)\n    write.csv(AllEcoSummary, file = \"eco_summary.csv\",row.names = FALSE)\n    write.csv(hp_summary, file = \"hydropower_summary.csv\",row.names = FALSE)\n    ##########################################################################\n  }\n\n} # END OF SWAT WHILE LOOP\n\n\n\n",
    "created" : 1475616326153.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2248337907",
    "id" : "35709114",
    "lastKnownWriteTime" : 1475524431,
    "last_content_update" : 1475524431,
    "path" : "C:/Users/Hassaan/Desktop/CGIAR_ABM_coding_HK/ABM_Mekong/SWAT4ABM_072616/ABM_SWAT_1003.R",
    "project_path" : "ABM_SWAT_1003.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}